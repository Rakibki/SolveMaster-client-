[
  {
    "problemId": 1,
    "title": "Reverse a String",
    "description": "Write a function that reverses a string.",
    "difficulty": "Easy",
    "exampleInput": "hello",
    "exampleOutput": "olleh",
    "tests": [
      { "input": "hello", "output": "olleh" },
      { "input": "abcdef", "output": "fedcba" }
    ]
  },
  {
    "problemId": 2,
    "title": "Find the Maximum",
    "description": "Write a function that finds the maximum number in an array.",
    "difficulty": "Easy",
    "exampleInput": [1, 4, 2, 7, 3],
    "exampleOutput": 7,
    "tests": [
      { "input": [1, 4, 2, 7, 3], "output": 7 },
      { "input": [-1, -4, -2, -7, -3], "output": -1 }
    ]
  },
  {
    "problemId": 3,
    "title": "Palindrome Check",
    "description": "Write a function that checks if a string is a palindrome.",
    "difficulty": "Easy",
    "exampleInput": "racecar",
    "exampleOutput": true,
    "tests": [
      { "input": "racecar", "output": true },
      { "input": "hello", "output": false }
    ]
  },
  {
    "problemId": 4,
    "title": "FizzBuzz",
    "description": "Write a function that prints numbers from 1 to n, but for multiples of 3, print 'Fizz', for multiples of 5, print 'Buzz', and for multiples of both 3 and 5, print 'FizzBuzz'.",
    "difficulty": "Easy",
    "exampleInput": 15,
    "exampleOutput": [
      1,
      2,
      "Fizz",
      4,
      "Buzz",
      "Fizz",
      7,
      8,
      "Fizz",
      "Buzz",
      11,
      "Fizz",
      13,
      14,
      "FizzBuzz"
    ],
    "tests": [
      {
        "input": 15,
        "output": [
          1,
          2,
          "Fizz",
          4,
          "Buzz",
          "Fizz",
          7,
          8,
          "Fizz",
          "Buzz",
          11,
          "Fizz",
          13,
          14,
          "FizzBuzz"
        ]
      },
      {
        "input": 10,
        "output": [1, 2, "Fizz", 4, "Buzz", "Fizz", 7, 8, "Fizz", "Buzz"]
      }
    ]
  },
  {
    "problemId": 5,
    "title": "Factorial",
    "description": "Write a function that calculates the factorial of a number.",
    "difficulty": "Easy",
    "exampleInput": 5,
    "exampleOutput": 120,
    "tests": [
      { "input": 5, "output": 120 },
      { "input": 3, "output": 6 }
    ]
  },

  {
    "problemId": 6,
    "title": "Sum of Array Elements",
    "description": "Write a function that calculates the sum of all elements in an array.",
    "difficulty": "Easy",
    "exampleInput": [1, 2, 3, 4, 5],
    "exampleOutput": 15,
    "tests": [
      { "input": [1, 2, 3, 4, 5], "output": 15 },
      { "input": [10, -5, 3, 7], "output": 15 }
    ]
  },
  {
    "problemId": 7,
    "title": "Check Prime Number",
    "description": "Write a function that checks if a given number is prime.",
    "difficulty": "Easy",
    "exampleInput": 7,
    "exampleOutput": true,
    "tests": [
      { "input": 7, "output": true },
      { "input": 12, "output": false }
    ]
  },
  {
    "problemId": 8,
    "title": "Count Vowels",
    "description": "Write a function that counts the number of vowels in a string.",
    "difficulty": "Easy",
    "exampleInput": "hello",
    "exampleOutput": 2,
    "tests": [
      { "input": "hello", "output": 2 },
      { "input": "world", "output": 1 }
    ]
  },
  {
    "problemId": 9,
    "title": "Remove Duplicates",
    "description": "Write a function that removes duplicates from an array.",
    "difficulty": "Easy",
    "exampleInput": [1, 2, 2, 3, 4, 4, 5],
    "exampleOutput": [1, 2, 3, 4, 5],
    "tests": [
      { "input": [1, 2, 2, 3, 4, 4, 5], "output": [1, 2, 3, 4, 5] },
      { "input": ["a", "b", "a", "c", "b"], "output": ["a", "b", "c"] }
    ]
  },
  {
    "problemId": 10,
    "title": "Find Largest Number",
    "description": "Write a function that finds the largest number in an array of numbers.",
    "difficulty": "Easy",
    "exampleInput": [10, 20, 5, 30],
    "exampleOutput": 30,
    "tests": [
      { "input": [10, 20, 5, 30], "output": 30 },
      { "input": [-5, -10, -2, -30], "output": -2 }
    ]
  },

  {
    "problemId": 11,
    "title": "Check for Anagrams",
    "description": "Write a function that checks if two strings are anagrams of each other.",
    "difficulty": "Easy",
    "exampleInput": ["listen", "silent"],
    "exampleOutput": true,
    "tests": [
      { "input": ["listen", "silent"], "output": true },
      { "input": ["hello", "world"], "output": false }
    ]
  },
  {
    "problemId": 12,
    "title": "Calculate Power",
    "description": "Write a function that calculates the power of a number.",
    "difficulty": "Easy",
    "exampleInput": [2, 3],
    "exampleOutput": 8,
    "tests": [
      { "input": [2, 3], "output": 8 },
      { "input": [5, 2], "output": 25 }
    ]
  },
  {
    "problemId": 13,
    "title": "Find Minimum",
    "description": "Write a function that finds the minimum number in an array.",
    "difficulty": "Easy",
    "exampleInput": [10, 5, 8, 3],
    "exampleOutput": 3,
    "tests": [
      { "input": [10, 5, 8, 3], "output": 3 },
      { "input": [100, 50, 75, 120], "output": 50 }
    ]
  },
  {
    "problemId": 14,
    "title": "Title Case a Sentence",
    "description": "Write a function that converts the first letter of each word in a sentence to uppercase.",
    "difficulty": "Easy",
    "exampleInput": "hello world",
    "exampleOutput": "Hello World",
    "tests": [
      { "input": "hello world", "output": "Hello World" },
      { "input": "this is a test", "output": "This Is A Test" }
    ]
  },
  {
    "problemId": 15,
    "title": "Find Average",
    "description": "Write a function that calculates the average of numbers in an array.",
    "difficulty": "Easy",
    "exampleInput": [10, 20, 30],
    "exampleOutput": 20,
    "tests": [
      { "input": [10, 20, 30], "output": 20 },
      { "input": [1, 2, 3, 4, 5], "output": 3 }
    ]
  },

  {
    "problemId": 16,
    "title": "Find Median",
    "description": "Write a function that finds the median of an array of numbers.",
    "difficulty": "Medium",
    "exampleInput": [3, 6, 9, 2, 5],
    "exampleOutput": 5,
    "tests": [
      { "input": [3, 6, 9, 2, 5], "output": 5 },
      { "input": [10, 15, 20, 25], "output": 17.5 }
    ]
  },
  {
    "problemId": 17,
    "title": "Merge Arrays",
    "description": "Write a function that merges two sorted arrays into one sorted array.",
    "difficulty": "Medium",
    "exampleInput": [
      [1, 3, 5],
      [2, 4, 6]
    ],
    "exampleOutput": [1, 2, 3, 4, 5, 6],
    "tests": [
      {
        "input": [
          [1, 3, 5],
          [2, 4, 6]
        ],
        "output": [1, 2, 3, 4, 5, 6]
      },
      {
        "input": [
          [-2, 0, 4],
          [-3, 1, 6]
        ],
        "output": [-3, -2, 0, 1, 4, 6]
      }
    ]
  },
  {
    "problemId": 18,
    "title": "Find Missing Number",
    "description": "Write a function that finds the missing number in an array containing all integers from 1 to n except for one.",
    "difficulty": "Medium",
    "exampleInput": [1, 2, 3, 5],
    "exampleOutput": 4,
    "tests": [
      { "input": [1, 2, 3, 5], "output": 4 },
      { "input": [10, 8, 7, 6, 5, 4, 2, 1], "output": 9 }
    ]
  },
  {
    "problemId": 19,
    "title": "Check Balanced Parentheses",
    "description": "Write a function that checks if a given string of parentheses is balanced.",
    "difficulty": "Medium",
    "exampleInput": "(())",
    "exampleOutput": true,
    "tests": [
      { "input": "(())", "output": true },
      { "input": "((())", "output": false },
      { "input": "((())", "output": false }
    ]
  },
  {
    "problemId": 21,
    "title": "Find Longest Substring Without Repeating Characters",
    "description": "Write a function that finds the length of the longest substring without repeating characters.",
    "difficulty": "Medium",
    "exampleInput": "abcabcbb",
    "exampleOutput": 3,
    "tests": [
      { "input": "abcabcbb", "output": 3 },
      { "input": "bbbbb", "output": 1 }
    ]
  },
  {
    "problemId": 24,
    "title": "Valid Parentheses",
    "description": "Write a function that determines if the input string is valid by using parentheses.",
    "difficulty": "Medium",
    "exampleInput": "()[]{}",
    "exampleOutput": true,
    "tests": [
      { "input": "()[]{}", "output": true },
      { "input": "([)]", "output": false }
    ]
  },
  {
    "problemId": 25,
    "title": "Merge Intervals",
    "description": "Write a function that merges overlapping intervals.",
    "difficulty": "Medium",
    "exampleInput": [
      [1, 3],
      [2, 6],
      [8, 10],
      [15, 18]
    ],
    "exampleOutput": [
      [1, 6],
      [8, 10],
      [15, 18]
    ],
    "tests": [
      {
        "input": [
          [1, 3],
          [2, 6],
          [8, 10],
          [15, 18]
        ],
        "output": [
          [1, 6],
          [8, 10],
          [15, 18]
        ]
      },
      {
        "input": [
          [1, 4],
          [4, 5]
        ],
        "output": [[1, 5]]
      }
    ]
  },
  {
    "problemId": 51,
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "difficulty": "Hard",
    "exampleInput": [10, 9, 2, 5, 3, 7, 101, 18],
    "exampleOutput": 4,
    "tests": [
      { "input": [10, 9, 2, 5, 3, 7, 101, 18], "output": 4 },
      { "input": [0, 1, 0, 3, 2, 3], "output": 4 }
    ]
  },
  {
    "problemId": 52,
    "title": "Search in Rotated Sorted Array",
    "description": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). You are given the target value to search for. If found in the array return its index, otherwise return -1.",
    "difficulty": "Hard",
    "exampleInput": [[4, 5, 6, 7, 0, 1, 2], 0],
    "exampleOutput": 4,
    "tests": [
      { "input": [[4, 5, 6, 7, 0, 1, 2], 0], "output": 4 },
      { "input": [[4, 5, 6, 7, 0, 1, 2], 3], "output": -1 }
    ]
  },
  {
    "problemId": 53,
    "title": "Minimum Window Substring",
    "description": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string ''.",
    "difficulty": "Hard",
    "exampleInput": ["ADOBEC", "ABC"],
    "exampleOutput": "BEC",
    "tests": [
      { "input": ["ADOBEC", "ABC"], "output": "BEC" },
      { "input": ["a", "a"], "output": "a" }
    ]
  },
  {
    "problemId": 54,
    "title": "Regular Expression Matching",
    "description": "Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'. '.' Matches any single character. '*' Matches zero or more of the preceding element.",
    "difficulty": "Hard",
    "exampleInput": ["aa", "a*"],
    "exampleOutput": true,
    "tests": [
      { "input": ["aa", "a*"], "output": true },
      { "input": ["mississippi", "mis*is*p*."], "output": false }
    ]
  },
  {
    "problemId": 55,
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals.",
    "difficulty": "Hard",
    "exampleInput": [
      [1, 3],
      [2, 6],
      [8, 10],
      [15, 18]
    ],
    "exampleOutput": [
      [1, 6],
      [8, 10],
      [15, 18]
    ],
    "tests": [
      {
        "input": [
          [1, 3],
          [2, 6],
          [8, 10],
          [15, 18]
        ],
        "output": [
          [1, 6],
          [8, 10],
          [15, 18]
        ]
      },
      {
        "input": [
          [1, 4],
          [4, 5]
        ],
        "output": [[1, 5]]
      }
    ]
  },
  {
    "problemId": 56,
    "title": "Jump Game II",
    "description": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps.",
    "difficulty": "Hard",
    "exampleInput": [2, 3, 1, 1, 4],
    "exampleOutput": 2,
    "tests": [
      { "input": [2, 3, 1, 1, 4], "output": 2 },
      { "input": [2, 3, 0, 1, 4], "output": 2 }
    ]
  },
  {
    "problemId": 57,
    "title": "Word Search II",
    "description": "Given an m x n board of characters and a list of strings words, return all words on the board.",
    "difficulty": "Hard",
    "exampleInput": [
      ["o", "a", "a", "n"],
      ["e", "t", "a", "e"],
      ["i", "h", "k", "r"],
      ["i", "f", "l", "v"]
    ],
    "exampleOutput": ["oath", "eat"],
    "tests": [
      {
        "input": [
          ["o", "a", "a", "n"],
          ["e", "t", "a", "e"],
          ["i", "h", "k", "r"],
          ["i", "f", "l", "v"]
        ],
        "output": ["oath", "eat"]
      },
      {
        "input": [
          ["a", "b"],
          ["c", "d"]
        ],
        "output": []
      }
    ]
  },

  {
    "problemId": 58,
    "title": "Binary Tree Maximum Path Sum",
    "description": "Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.",
    "difficulty": "Hard",
    "exampleInput": {
      "val": 1,
      "left": {
        "val": 2,
        "left": null,
        "right": null
      },
      "right": {
        "val": 3,
        "left": null,
        "right": null
      }
    },
    "exampleOutput": 6,
    "tests": [
      {
        "input": {
          "val": -10,
          "left": {
            "val": 9,
            "left": null,
            "right": null
          },
          "right": {
            "val": 20,
            "left": {
              "val": 15,
              "left": null,
              "right": null
            },
            "right": {
              "val": 7,
              "left": null,
              "right": null
            }
          }
        },
        "output": 42
      }
    ]
  },
  {
    "problemId": 59,
    "title": "Distinct Subsequences",
    "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t.",
    "difficulty": "Hard",
    "exampleInput": ["rabbbit", "rabbit"],
    "exampleOutput": 3,
    "tests": [
      { "input": ["rabbbit", "rabbit"], "output": 3 },
      { "input": ["babgbag", "bag"], "output": 5 }
    ]
  },
  {
    "problemId": 60,
    "title": "Maximal Rectangle",
    "description": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
    "difficulty": "Hard",
    "exampleInput": [
      ["1", "0", "1", "0", "0"],
      ["1", "0", "1", "1", "1"],
      ["1", "1", "1", "1", "1"],
      ["1", "0", "0", "1", "0"]
    ],
    "exampleOutput": 6,
    "tests": [
      {
        "input": [
          ["1", "0", "1", "0", "0"],
          ["1", "0", "1", "1", "1"],
          ["1", "1", "1", "1", "1"],
          ["1", "0", "0", "1", "0"]
        ],
        "output": 6
      }
    ]
  },

  {
    "problemId": 61,
    "title": "Palindrome Partitioning II",
    "description": "Given a string s, partition s such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of s.",
    "difficulty": "Hard",
    "exampleInput": "aab",
    "exampleOutput": 1,
    "tests": [
      { "input": "aab", "output": 1 },
      { "input": "banana", "output": 2 }
    ]
  },
  {
    "problemId": 62,
    "title": "Count of Smaller Numbers After Self",
    "description": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].",
    "difficulty": "Hard",
    "exampleInput": [5, 2, 6, 1],
    "exampleOutput": [2, 1, 1, 0],
    "tests": [
      { "input": [5, 2, 6, 1], "output": [2, 1, 1, 0] },
      { "input": [-1], "output": [0] }
    ]
  },
  {
    "problemId": 63,
    "title": "Minimum Window Subsequence",
    "description": "Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.",
    "difficulty": "Hard",
    "exampleInput": ["abcdebdde", "bde"],
    "exampleOutput": "bcde",
    "tests": [
      { "input": ["abcdebdde", "bde"], "output": "bcde" },
      { "input": ["abcdebdde", "bd"], "output": "bdde" }
    ]
  },
  {
    "problemId": 64,
    "title": "Insert Interval",
    "description": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).",
    "difficulty": "Hard",
    "exampleInput": [
      [
        [1, 3],
        [6, 9]
      ],
      [2, 5]
    ],
    "exampleOutput": [
      [1, 5],
      [6, 9]
    ],
    "tests": [
      {
        "input": [
          [
            [1, 3],
            [6, 9]
          ],
          [2, 5]
        ],
        "output": [
          [1, 5],
          [6, 9]
        ]
      },
      {
        "input": [
          [
            [1, 2],
            [3, 5],
            [6, 7],
            [8, 10],
            [12, 16]
          ],
          [4, 8]
        ],
        "output": [
          [1, 2],
          [3, 10],
          [12, 16]
        ]
      }
    ]
  },
  {
    "problemId": 65,
    "title": "Text Justification",
    "description": "Given an array of words and a wproblemIdth maxWproblemIdth, format the text such that each line has exactly maxWproblemIdth characters and is fully (left and right) justified.",
    "difficulty": "Hard",
    "exampleInput": [
      ["This", "is", "an", "example", "of", "text", "justification."],
      16
    ],
    "exampleOutput": [
      "This    is    an",
      "example  of text",
      "justification.  "
    ],
    "tests": [
      {
        "input": [
          ["This", "is", "an", "example", "of", "text", "justification."],
          16
        ],
        "output": ["This    is    an", "example  of text", "justification.  "]
      },
      {
        "input": [["What", "must", "be", "acknowledgment", "shall", "be"], 16],
        "output": ["What   must   be", "acknowledgment  ", "shall be        "]
      }
    ]
  },
  {
    "problemId": 66,
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.",
    "difficulty": "Hard",
    "exampleInput": [100, 4, 200, 1, 3, 2],
    "exampleOutput": 4,
    "tests": [
      { "input": [100, 4, 200, 1, 3, 2], "output": 4 },
      { "input": [0, 3, 7, 2, 5, 8, 4, 6, 0, 1], "output": 9 }
    ]
  },
  {
    "problemId": 67,
    "title": "Expression Add Operators",
    "description": "Given a string num that contains only digits and an integer target, return all possibilities to add the binary operators '+', '-', or '*' between the digits of num so that the resultant expression evaluates to the target value.",
    "difficulty": "Hard",
    "exampleInput": ["123", 6],
    "exampleOutput": ["1+2+3", "1*2*3"],
    "tests": [
      { "input": ["123", 6], "output": ["1+2+3", "1*2*3"] },
      { "input": ["232", 8], "output": ["2*3+2", "2+3*2"] }
    ]
  },
  {
    "problemId": 68,
    "title": "Word Break II",
    "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valproblemId dictionary word. Return all such possible sentences in any order.",
    "difficulty": "Hard",
    "exampleInput": ["catsanddog", ["cat", "cats", "and", "sand", "dog"]],
    "exampleOutput": ["cats and dog", "cat sand dog"],
    "tests": [
      {
        "input": ["catsanddog", ["cat", "cats", "and", "sand", "dog"]],
        "output": ["cats and dog", "cat sand dog"]
      },
      {
        "input": [
          "pineapplepenapple",
          ["apple", "pen", "applepen", "pine", "pineapple"]
        ],
        "output": [
          "pine apple pen apple",
          "pineapple pen apple",
          "pine applepen apple"
        ]
      }
    ]
  },
  {
    "problemId": 69,
    "title": "SlproblemIding Window Maximum",
    "description": "You are given an array of integers nums, there is a slproblemIding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the slproblemIding window moves right by one position.",
    "difficulty": "Hard",
    "exampleInput": [[1, 3, -1, -3, 5, 3, 6, 7], 3],
    "exampleOutput": [3, 3, 5, 5, 6, 7],
    "tests": [
      {
        "input": [[1, 3, -1, -3, 5, 3, 6, 7], 3],
        "output": [3, 3, 5, 5, 6, 7]
      },
      { "input": [[1], 1], "output": [1] }
    ]
  },
  {
    "problemId": 70,
    "title": "Minimum Remove to Make ValproblemId Parentheses",
    "description": "Given a string s of '(' , ')' and lowercase English characters. Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valproblemId and return any valproblemId string.",
    "difficulty": "Hard",
    "exampleInput": ["lee(t(c)o)de)", "a)b(c)d"],
    "exampleOutput": ["lee(t(c)o)de", "ab(c)d"],
    "tests": [
      {
        "input": ["lee(t(c)o)de)", "a)b(c)d"],
        "output": ["lee(t(c)o)de", "ab(c)d"]
      },
      { "input": ["))((", "(a(b(c)d)"], "output": ["", "a(b(c)d)"] }
    ]
  },
  {
    "problemId": 71,
    "title": "Count of Range Sum",
    "description": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.",
    "difficulty": "Hard",
    "exampleInput": [[-2, 5, -1], -2, 2],
    "exampleOutput": 3,
    "tests": [
      { "input": [[-2, 5, -1], -2, 2], "output": 3 },
      { "input": [[0], 0, 0], "output": 1 }
    ]
  },
  {
    "problemId": 72,
    "title": "Count Binary Substrings",
    "description": "Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.",
    "difficulty": "Hard",
    "exampleInput": "00110011",
    "exampleOutput": 6,
    "tests": [
      { "input": "00110011", "output": 6 },
      { "input": "10101", "output": 4 }
    ]
  },
  {
    "problemId": 74,
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "difficulty": "Easy",
    "exampleInput": { "nums": [2, 7, 11, 15], "target": 9 },
    "exampleOutput": [0, 1],
    "tests": [
      { "input": { "nums": [2, 7, 11, 15], "target": 9 }, "output": [0, 1] },
      { "input": { "nums": [3, 2, 4], "target": 6 }, "output": [1, 2] }
    ]
  },
  {
    "problemId": 75,
    "title": "Reverse Integer",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed.",
    "difficulty": "Easy",
    "exampleInput": 123,
    "exampleOutput": 321,
    "tests": [
      { "input": 123, "output": 321 },
      { "input": -123, "output": -321 }
    ]
  },
  {
    "problemId": 76,
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome integer.",
    "difficulty": "Easy",
    "exampleInput": 121,
    "exampleOutput": true,
    "tests": [
      { "input": 121, "output": true },
      { "input": -121, "output": false }
    ]
  },
  {
    "problemId": 77,
    "title": "Roman to Integer",
    "description": "Given a roman numeral, convert it to an integer.",
    "difficulty": "Easy",
    "exampleInput": "III",
    "exampleOutput": 3,
    "tests": [
      { "input": "III", "output": 3 },
      { "input": "IV", "output": 4 }
    ]
  },
  {
    "problemId": 78,
    "title": "ValproblemId Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valproblemId.",
    "difficulty": "Easy",
    "exampleInput": "()",
    "exampleOutput": true,
    "tests": [
      { "input": "()", "output": true },
      { "input": "()[]{}", "output": true }
    ]
  },
  {
    "problemId": 79,
    "title": "Merge Two Sorted Lists",
    "description": "Merge two sorted linked lists and return it as a sorted list.",
    "difficulty": "Easy",
    "exampleInput": {
      "l1": {
        "val": 1,
        "next": { "val": 2, "next": { "val": 4, "next": null } }
      },
      "l2": {
        "val": 1,
        "next": { "val": 3, "next": { "val": 4, "next": null } }
      }
    },
    "exampleOutput": {
      "val": 1,
      "next": {
        "val": 1,
        "next": {
          "val": 2,
          "next": {
            "val": 3,
            "next": { "val": 4, "next": { "val": 4, "next": null } }
          }
        }
      }
    },
    "tests": [
      {
        "input": {
          "l1": {
            "val": 1,
            "next": { "val": 2, "next": { "val": 4, "next": null } }
          },
          "l2": {
            "val": 1,
            "next": { "val": 3, "next": { "val": 4, "next": null } }
          }
        },
        "output": {
          "val": 1,
          "next": {
            "val": 1,
            "next": {
              "val": 2,
              "next": {
                "val": 3,
                "next": { "val": 4, "next": { "val": 4, "next": null } }
              }
            }
          }
        }
      },
      { "input": { "l1": null, "l2": null }, "output": null }
    ]
  },
  {
    "problemId": 80,
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. Return the new length.",
    "difficulty": "Easy",
    "exampleInput": [0, 0, 1, 1, 1, 2, 2, 3, 3, 4],
    "exampleOutput": 5,
    "tests": [
      { "input": [0, 0, 1, 1, 1, 2, 2, 3, 3, 4], "output": 5 },
      { "input": [1, 1, 2], "output": 2 }
    ]
  }
]
